<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
                layout="absolute"
                width="100%"
                height="100%"
                viewSourceURL="srcview/index.html">
  <mx:Panel title="Use Multiple ArcGIS Service: GeocodeService and MapService"
            width="100%"
            height="100%">
    <mx:VBox width="100%"
             height="100%">
      <mx:Text htmlText="The base map is a map type with tiles created in NC State Plane 83 with tile size of 512 x 512.
       &lt;br/&gt;Click anywhere on map will trigger MapService.identify operation. Results are displayed in an InfoWindow and highlighted on map as either Marker, Polyline or Polygon.
       &lt;br/&gt;It also uses a GeocodeService.findAddressCandiates (for Charlotte, NC address only) and result is passed to MapSerivce.query operation again for detailed info about the address. 
       " />
      <mx:HBox width="100%">
        <mx:Label text="Type in a Charlotte,NC address or pick a sample:">
        </mx:Label>
        <mx:ComboBox editable="true" id="addr" width="300">
        <mx:ArrayCollection>
         <mx:String>600 E 4th st</mx:String>
         <mx:String>700 N tryon st</mx:String>
         <mx:String>5801 Rea rd</mx:String>
         <mx:String>8015 ballantyne commons parkway</mx:String>
      </mx:ArrayCollection>
      </mx:ComboBox>
        <mx:Button id="go"
                   label="Go"
                   enabled="false"
                   click="doGeocode(addr.text)"/>
        
      </mx:HBox>
      <mx:UIComponent id="mapHolder"
                      creationComplete="onHolderCreated(event)"
                      resize="onHolderResized(event)"
                      width="100%"
                      height="100%"/>
    </mx:VBox>

  </mx:Panel>

  <mx:Script>
    <![CDATA[
      import mx.controls.Alert;
      import com.google.maps.styles.FillStyle;
      import com.google.maps.*;
      import com.google.maps.controls.*;
      import com.google.maps.interfaces.*;
      import com.google.maps.geom.*;

      import com.google.maps.extras.arcgislink.*;

      import flash.display.*;
      import mx.controls.*;
      import mx.controls.dataGridClasses.*;
      import mx.collections.*;
 
      private var map:Map3D;
      private var svc:MapService;
      private var gc:GeocodeService;
      private var layer:Layer;

      SpatialReferences.addSpatialReference(2264, 'PROJCS["NAD_1983_StatePlane_North_Carolina_FIPS_3200_Feet",GEOGCS["GCS_North_American_1983",DATUM["D_North_American_1983",SPHEROID["GRS_1980",6378137.0,298.257222101]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Lambert_Conformal_Conic"],PARAMETER["False_Easting",2000000.002616666],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",-79.0],PARAMETER["Standard_Parallel_1",34.33333333333334],PARAMETER["Standard_Parallel_2",36.16666666666666],PARAMETER["Latitude_Of_Origin",33.75],UNIT["Foot_US",0.3048006096012192]]');

      public function onHolderCreated(event:Event):void {
        svc=new MapService('http://maps.ci.charlotte.nc.us/ArcGIS/rest/services/GET/BaseMap/MapServer');
        svc.addEventListener(ServiceEvent.LOAD, onServiceLoad);
        svc.addEventListener(ServiceEvent.ERROR, function(evt:ServiceEvent):void {
            Alert.show(evt.data.toString());
			mx.core.FlexGlobals.topLevelApplication.application.cursorManager.removeBusyCursor();
			
          });
       
      }

      public function onHolderResized(event:Event):void {
        if (map != null) {
          map.setSize(new Point(mapHolder.width, mapHolder.height));
        }
      }

      public function onServiceLoad(event:ServiceEvent):void {
        map=new Map3D();
        map.key="ABQIAAAA7QUChpcnvnmXxsjC7s1fCxQGj0PqsCtxKvarsoS-iqLdqZSKfxTd7Xf-2rEc_PC9o8IsJde80Wnj4g";
        map.sensor="false";
		map.width=mapHolder.width;
        map.height=mapHolder.height;
        mapHolder.addChild(map);
        map.addEventListener(MapEvent.MAP_PREINITIALIZE, onMapPreInitialize);
        map.addEventListener(MapEvent.MAP_READY, onMapReady);
        layer = svc.getLayer('Master Address');
      }

      private function onMapPreInitialize(event:Event):void {
        var agsLayer:ArcGISTileLayer=new ArcGISTileLayer(svc);
        var agsMapType:ArcGISMapType=new ArcGISMapType([agsLayer], new ArcGISMapTypeOptions({name: agsLayer.getName().replace(/ /g, '\n')}));
        var bnds:LatLngBounds=agsLayer.getInitialBounds();
        var opts:MapOptions=new MapOptions({viewMode: View.VIEWMODE_PERSPECTIVE, attitude: new Attitude(0, 30, 0)});
        opts.zoom=17;
        opts.center=new LatLng(35.227, -80.84);
        opts.mapTypes=[agsMapType];
        map.setInitOptions(opts);
      }

      private function onMapReady(event:Event):void {
        map.addControl(new com.google.maps.controls.MapTypeControl());
        map.addControl(new NavigationControl());
        map.enableContinuousZoom();
        map.enableScrollWheelZoom();
        map.addEventListener(MapMouseEvent.CLICK, function(evt:MapMouseEvent):void {
            doIdentify(evt.latLng);
        });
        gc=new GeocodeService('http://maps.ci.charlotte.nc.us/ArcGIS/rest/services/GET/MATLocator/GeocodeServer');
        gc.addEventListener(ServiceEvent.LOAD, function(evt:ServiceEvent):void {
            go.enabled=true;
        });
      }


      private function doIdentify(latlng:LatLng):void {
        map.clearOverlays();
        var prj:IProjection=map.getProjection();
        var size:Point=map.getSize();
        // Map.getLatLngBounds returns null, so approximate here.
        var pt:Point=map.fromLatLngToPoint(latlng);
        var sw:LatLng=map.fromPointToLatLng(new Point(pt.x - size.x / 2, pt.y + size.y / 2));
        var ne:LatLng=map.fromPointToLatLng(new Point(pt.x + size.x / 2, pt.y - size.y / 2));

        var bnds:LatLngBounds=new LatLngBounds(sw, ne);

        var idParams:IdentifyParameters=new IdentifyParameters({geometry: latlng, layerOption: 'top', tolerance: 5, bounds: bnds, width: size.x, height: size.y, dpi: 96, returnGeometry: true});
		mx.core.FlexGlobals.topLevelApplication.application.cursorManager.setBusyCursor();
        svc.identify(idParams, function (res:IdentifyResults):void {
			mx.core.FlexGlobals.topLevelApplication.application.cursorManager.removeBusyCursor();
            if (res.results && res.results.length > 0) {
              idWin.visible=true;

              idWin.title=res.results[0].layerName + ' : ' + res.results[0].value;
              var data:ArrayCollection=new ArrayCollection();
              for (var i:int=0, c:int=res.results.length; i < c; i++) {
                var r:IdentifyResult=res.results[i] as IdentifyResult;
                var a:*=r.attributes;
                for (var x:String in a) {
                  if (a.hasOwnProperty(x)) {
                    var val:*=a[x];
                    val=(val === null || typeof val === 'undefined') ? '' : '' + val;
                    data.addItem({name: x, value: val});
                  }
                }
                if (r.geometry && r.geometry.length > 0) {
                  for each (var ov:IOverlay in r.geometry) {
                    map.addOverlay(ov);
                  }
                }
              }
              idResults.dataProvider=data;
              idResults.alpha=0.5;
              map.openInfoWindow(latlng, new InfoWindowOptions({drawDefaultFrame: false, customContent: idWin, fillStyle: new FillStyle({alpha: 0.2})}));
            }
          });
      }

      private function doGeocode(addr:String):void {
        if (!addr){
          Alert.show('Please type or choose a valid Charlotte address');
          return;
        }
        map.clearOverlays();
        map.closeInfoWindow();
        var params:GeocodeParameters=new GeocodeParameters({inputs: {Street: addr, outFields:['Ref_ID']}});
		mx.core.FlexGlobals.topLevelApplication.application.cursorManager.setBusyCursor();
        gc.findAddressCandidates(params, function(gcRes:GeocodeResults):void {
			mx.core.FlexGlobals.topLevelApplication.application.cursorManager.removeBusyCursor();
            if (gcRes.candidates && gcRes.candidates.length > 0) {
              // for simplicity just take the first candidate
              var res:GeocodeResult=gcRes.candidates[0];
              if (res.location!=null){
                trace(res.location.toUrlValue());
                //map.flyTo(res.location, 17, new com.google.maps.geom.Attitude(20, 30, 0));
                map.setCenter(res.location, 17);
                doQuery(res.attributes['Ref_ID'], res.location);
                //doIdentify();
                return;
              }
            } 
             Alert.show('Can not find address. Please check your input. Note only Charlotte, NC address can be located');
           });


      }
      
      private function doQuery(objectid:int, latlng:LatLng):void{
         var params:QueryParameters=new QueryParameters({
         returnGeometry: false, 
         where: "OBJECTID = "+objectid, outFields:['*']});
         
         layer.query(params, function(rs:ResultSet):void {
			 mx.core.FlexGlobals.topLevelApplication.application.cursorManager.removeBusyCursor();
           var fs:Array=rs.features;
           if (fs && fs.length>0){
              idWin.visible=true;
              idWin.title= layer.name+':'+ArcGISUtil.getAttributeValue((fs[0] as Feature).attributes, rs.displayFieldName);
              var data:ArrayCollection=new ArrayCollection();
              for (var i:int=0, c:int=fs.length; i < c; i++) {
                var r:Feature=fs[i] as Feature;
                var a:*=r.attributes;
                for (var x:String in a) {
                  if (a.hasOwnProperty(x)) {
                    var val:*=a[x];
                    val=(val === null || typeof val === 'undefined') ? '' : '' + val;
                    data.addItem({name: rs.fieldAliases[x], value: val});
                  }
                }
              }
              idResults.dataProvider=data;
              idResults.alpha=0.5;
              
                
              map.openInfoWindow(latlng, new InfoWindowOptions({drawDefaultFrame: false, customContent: idWin, fillStyle: new FillStyle({alpha: 0.2})}));
            }
          });
       
      }
    ]]>
  </mx:Script>
  <mx:Panel id="idWin"
            visible="false"
            layout="vertical"
            backgroundAlpha="0.5">

    <mx:DataGrid id="idResults"
                 width="250"
                 height="200">
      <mx:columns>
        <mx:DataGridColumn headerText="Name"
                           dataField="name"
                           sortable="false"/>
        <mx:DataGridColumn headerText="Value"
                           dataField="value"
                           sortable="false"/>
      </mx:columns>
    </mx:DataGrid>
  </mx:Panel>
</mx:Application>
